// 중요도 높습니다!
// push - 배열의 뒤에 값을 추가한다
// 반환값: 배열의 길이
// pop - 뒤에서 값을 꺼내고 반환
// 반환값: 꺼낸 값

// unshift - 배열의 앞에 값을 추가한다
// 반환값: 배열의 길이
// shift - 앞에서 값을 꺼내고 반환
// 반환값: 꺼낸 값

// 문제
// push, pop, unshift, shift를 이용하여 다음과 같은 배열을 만들어보세요.
// 입력값: [10, 20, 30, 40]
// 출력값: [10, 100, 20, 30, 50]
// 5분. 구조분해할당, splice 사용 안됩니다. 위 4개의 메소드만 사용함.
const array = [10,20,30,40];
array.pop()
array.push(50)
array.shift() // 괄호안에 어떤 숫자를 넣어도 왼쪽 맨 끝 요소가 나옴
array.unshift(100)
array.unshift(10)

// 1. splice : 접착, 겹쳐 잇기, 맞대어 잇다
// arr.splice(start, deleteCount, item1, item2, ...)
let arr = [10, 20, 30]
arr.splice(1, 0, 100) // 1번째에, 0개를 지우고, 100을 넣어라

let arr = [10,20,30]
arr.splice(1,1,100,200) // 1번째에, 1개를 지우고, 100과 200을 넣어라

let arr = [10,20,30]
arr.splice(1,1, [100, 200]) // 1번쨰에, 1개를 지우고, [100, 200] 을 넣어라
// arr 는 실무에서 let 이 아닌 const 로 선언한다. (수업이라서 오류 피하려고 let으로함)


//////////////
// 같은 풀이 문제
let arr = [10, 20, 30, 40]
let x = [1,2,3]
// 만들고 싶은 값: [10, 1,2,3, 20,30,40, 1,2,3, 100]

// 방법 1
let arr = [10, 20, 30, 40]
let x = [1,2,3]
arr.splice(1,0, ...x) // 전개구문 대괄호 하나 없앤다.
arr.splice(7,0, ...x)
// arr.push(...x) 또는 arr.push(1,2,3) 또는 arr.push(...[100,200,300])
arr.push(100)

// 방법 2
let arr = [10, 20, 30, 40]
let x = [1,2,3]
arr.splice(1, 0, x[0],x[1],x[2])
// 생략

// 전개구문 사용 예시 with Math.max
Math.max(10,20,30,22,1) // 30
Math.max([10,20,30,22,1]) // NaN
Math.max(...[10,20,30,22,1]) //30

////////
// splice 에서 인자값을 하나만 넣으면, 그 인덱스부터 끝까지 다 지운다.
// splice 에서 인자값을 두개만 넣으면, 두번째 인자값부터 끝까지 다 지운다.
let arr = [10,20,30,40]
arr.splice(1) // 1번째부터 끝까지 다 지워라
arr.splice(1,2) // 1번째부터 2개를 지워라(삽입값은 없습니다.)


// 2. slice
// arr.slice(start, end)
// 주의! 원본은 수정되지 않습니다.
// 비교! splice는 원본을 수정합니다!
let arr = [10,20,30,40]
arr.slice(1,3)  // 1번째부터 3번째 전까지 (2번째까지) 자른다.
arr.slice(1, 10000) // index에 없는 값도 오류가 생기지 않습니다! splice 도 마찬가지입니다.
arr.slice(100, 10000) // index에 없는 값도 오류가 생기지 않습니다! splice 도 마찬가지입니다.

// JS 설계철학: 오류를 최대한 뿝지 않는다. CSS: 오류를 뿝지 않는다.